const path = require('path')
const fs = require('fs-extra')

//读取Swargger JSON 文件, 接受结果为对象
fs.readJson('./swagger.json', async (err, packageObj) => {
  if (err) console.error(err)
  const swarggerJSON = packageObj
  const clientMethods = generateClientAPIMethods(swarggerJSON)
  const apiClientPath = path.resolve(__dirname, path.join('plugins/api/api.js'))
  await fs.writeFile(apiClientPath, clientMethods)
})

//转换的js文件
function generateClientAPIMethods(methods) {
  const body = generateClientAPIMethodsBody(methods)
  return (
    '// This file is autogenerated by SwarggerAutoApi.js\n' +
    `export default client => ({\n${body}})`
  )
}

function isObject(val) {
  return val !== null && typeof val === 'object' && !Array.isArray(val)
}

//对象解析操作
function generateClientAPIMethodsBody(methods, loadedMethods = '', path = null, level = 1) {
  if (isObject(methods.paths)) {
    let oldVal = ""
    let i = 0
    for (const prop of Object.keys(methods.paths)) {
      let propArray = prop.split('/')
      let propLength = propArray.length
      if (propLength) {
        //方法名字（取最后一位）
        let funName = propArray[propLength - 1]
        //请求方式
        let methodName = Object.keys(methods.paths[prop])[0]
        if (oldVal !== methods.paths[prop][methodName].tags[0] && i) {
          loadedMethods += `  },\n`
        }
        if (oldVal !== methods.paths[prop][methodName].tags[0]) {
          loadedMethods += `  ${methods.paths[prop][methodName].tags[0]}: {\n`
        }
        if (methods.paths[prop][methodName].summary && funName && methodName) {
          loadedMethods += `    /* \n`
          // 接口名称
          loadedMethods += `    ** 接口名称: ${methods.paths[prop][methodName].summary.replace(/\n/, '    // ')}\n`
          // 参数结构
          loadedMethods += `    ** 参数结构: \n`
          if (methods.paths[prop][methodName]['parameters'].length) {
            methods.paths[prop][methodName]['parameters'].map(item => {
              loadedMethods += `    **    ${JSON.stringify(item)}\n`
            })
          }
          // 传参
          loadedMethods += `    ** 传参(直接复制、粘贴、去掉注释就可以直接用): \n`
          if (methods.paths[prop][methodName]['parameters'].length) {
            loadedMethods += `    //    let params = { \n`
            methods.paths[prop][methodName]['parameters'].map(item => {
              // 判断是否是头部需要的信息，是的话就不进入传参，否则就进入
              if (item.name !== "AuthToken") {
                loadedMethods += `    //        ${JSON.stringify(item.name)}: "",// ${JSON.stringify(item.description)}\n`
              }
            })
            loadedMethods += `    //    } \n`
          }
          loadedMethods += `    */ \n`
        }
        loadedMethods += `    ${funName} (params) {\n`
        loadedMethods += `      return client.${methodName}('${prop}', ${methodName == "get" ? '{' : ""}\n`
        loadedMethods += `        params\n`
        loadedMethods += `      ${methodName == "get" ? '}' : ""})\n`
        loadedMethods += `    },\n`
        oldVal = methods.paths[prop][methodName].tags[0]
        i++
      }
    }
    loadedMethods += `  },\n`
  }
  return loadedMethods
}
