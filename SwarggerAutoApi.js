const path = require('path')
const fs = require('fs-extra')

//读取Swargger JSON 文件, 接受结果为对象
fs.readJson('./swagger.json', async (err, packageObj) => {
  if (err) console.error(err)
  const swarggerJSON = packageObj
  const clientMethods = generateClientAPIMethods(swarggerJSON)
  const apiClientPath = path.resolve(__dirname, path.join('api.js'))
  await fs.writeFile(apiClientPath, clientMethods)
})

//转换的js文件
function generateClientAPIMethods (methods) {
  const body = generateClientAPIMethodsBody(methods)
  return (
    '// This file is autogenerated by SwarggerAutoApi.js\n' +
    `export default client => ({\n${body}})`
  )
}

function isObject (val) {
  return val !== null && typeof val === 'object' && !Array.isArray(val)
}

//对象解析操作
function generateClientAPIMethodsBody (methods, loadedMethods = '', path = null, level = 1) {
  if (isObject(methods.paths)) {
    let oldVal = ""
    let i = 0
    for (const prop of Object.keys(methods.paths)) {
      let propArray = prop.split('/')
      let propLength = propArray.length
      if (propLength) {
        //方法名字（取最后一位）
        let funName = propArray[propLength - 1]
        //请求方式
        let methodName = Object.keys(methods.paths[prop])[0]
        if (oldVal !== methods.paths[prop][methodName].tags[0] && i) {
          loadedMethods += `  },\n`
        }
        if (oldVal !== methods.paths[prop][methodName].tags[0]) {
          loadedMethods += `  ${methods.paths[prop][methodName].tags[0]}: {\n`
        }
        if (methods.paths[prop][methodName].summary && funName && methodName) {
          loadedMethods += `    // ${methods.paths[prop][methodName].summary.replace(/\n/, '    // ')}\n`
        }
        loadedMethods += `    ${funName} (params) {\n`
        loadedMethods += `      return context.$axios.${methodName}('${prop}', {\n`
        loadedMethods += `        params\n`
        loadedMethods += `      })\n`
        loadedMethods += `    },\n`
        oldVal = methods.paths[prop][methodName].tags[0]
        i++
      }
    }
  }
  return loadedMethods
}